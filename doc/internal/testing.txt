Testing pyglet
==============
Test Suites
-----------
Tests for pyglet are divided into 3 suites:
    - unit tests
    - integration tests
    - interactive test


Unit tests
''''''''''
Unit tests only cover a single unit of code or a combination of a limited number of units. No
resource intensive computations should be included. These tests should run in limited time without
any user interaction.

Integration tests
'''''''''''''''''
Integration tests cover the integration of components of pyglet into the whole of pyglet and
the integration into the supported systems. Like unit tests these tests do not require user
interaction, but they can take longer to run due to access to system resources.

Interactive tests
'''''''''''''''''
Interactive tests require the user to verify whether the test is successful and in some cases
require the user to perform actions in order for the test to continue. These tests can take a
long time to run.

Interactive tests are based on the
:class:`~tests.interactive.interactive_test_base.InteractiveTestCase` class. This class offers
functionality to ask the user to verify the result, take screenshots for later comparison and
filter tests to perform non-interactive and sanity test runs.

There are currently 3 types of interactive test cases:
    - tests that can only run in fully interactive mode as they require the user to perform an
      action in order for the test to continue. These tests are decorated with
      :func:`~tests.interactive.interactive_test_base.requires_user_action`.
    - tests that can run without user interaction, but that cannot validate whether they should
      pass or fail. These tests are docorated with
      :func:`~tests.interactive.interactive_test_base.requires_user_validation`.
    - tests that can run without user interaction and that can compare results to screenshots from
      a previous run to determine whether they pass or fail. This is the default type.

Annotations
-----------
Some control over test execution can be exerted by using annotations in the form of
decorators. One function of annotations is to skip tests under certain conditions. For
available test annotations see :mod:`~tests.annotations`.

Running tests
-------------

Run using wrapper (preferred)
'''''''''''''''''''''''''''''
A wrapper is created to easily run a selection of tests or all tests. It also allows you
to specify how interactive tests are run.

To run using the wrapper::

    python -m tests.run <test suite> [<test suite> [...]]

The available test suites are:
    - ``unit``: Run the unit tests only
    - ``integration``: Run the integration tests only
    - ``interactive``: Run the interactive tests only
    - ``automatic``: Run all tests. For interactive tests only run those tests marked as
      able to run and verify without interaction.
    - ``sanity``: Run all tests. For interactive tests only run those tests marked as
      able to run without user interaction (not all might be able to really verify the
      results, but at least offer a sanity check).

You can combine the the names of the suites to create your own combination, e.g. to run
only the unit and integration tests::

    python -m tests.run unit integration

When running the ``interactive`` suite (alone or combined with other suites), there are
some additional options. You can choose to run in non-interactive mode. In this mode all
tests that require either an action from the user to continue or that require the user to
verify the results are skipped. Some tests that support verification using screenshots
from a previous run will still run if these screenshots are available.
To run in non-interactive mode use the ``--non-interactive`` or ``-n`` switch::

    python -m tests.run interactive --non-interactive
    python -m tests.run interactive -n

You can also run in sanity mode. In this mode only tests that really require user
interaction to be able to continue (so not just for verification) are skipped. Other tests
run, but might not verify the results. This can be used to check for crashes/errors during
execution of these tests.
To run in sanity mode use the ``--sanity`` or ``-s`` switch::

    python -m tests.run interactive --sanity
    python -m tests.run interactive -s

Run using unittest module
'''''''''''''''''''''''''
If you prefer to not use the wrapper, you can still run the tests using the builtin runner
from Python (or one of the compatible alternatives). In this case you will lose some of the
extra functionality provided by the wrapper, e.g. non-interactive running.

To run using unittest directly for one of the suites::

    python -m unittest discover tests.unit
    python -m unittest discover tests.integration
    python -m unittest discover tests.interactive

To run all tests::

    python -m unittest discover tests
