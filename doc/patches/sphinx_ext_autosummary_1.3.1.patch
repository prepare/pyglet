diff -upN /home/rob/python/pyglet/sphinx_1.3.1/generate.py ./generate.py
--- /home/rob/python/pyglet/sphinx_1.3.1/generate.py	2015-05-09 12:54:51.119462508 +0200
+++ ./generate.py	2015-05-09 12:51:12.109672148 +0200
@@ -25,15 +25,17 @@ import sys
 import pydoc
 import optparse
 import codecs
+import inspect
 
 from jinja2 import FileSystemLoader, TemplateNotFound
 from jinja2.sandbox import SandboxedEnvironment
 
 from sphinx import package_dir
-from sphinx.ext.autosummary import import_by_name, get_documenter
+from ..autosummary import import_by_name, get_documenter
 from sphinx.jinja2glue import BuiltinTemplateLoader
 from sphinx.util.osutil import ensuredir
 from sphinx.util.inspect import safe_getattr
+from sphinx.pycode import ModuleAnalyzer
 
 # Add documenters to AutoDirective registry
 from sphinx.ext.autodoc import add_documenter, \
@@ -80,6 +82,8 @@ def _simple_warn(msg):
     print('WARNING: ' + msg, file=sys.stderr)
 
 
+        
+    
 # -- Generating output ---------------------------------------------------------
 
 def generate_autosummary_docs(sources, output_dir=None, suffix='.rst',
@@ -133,6 +137,10 @@ def generate_autosummary_docs(sources, o
             warn('[autosummary] failed to import %r: %s' % (name, e))
             continue
 
+        # skip base modules
+        if name.endswith(".base"):
+            continue
+            
         fn = os.path.join(path, name + suffix)
 
         # skip it if it exists
@@ -153,9 +161,34 @@ def generate_autosummary_docs(sources, o
                 except TemplateNotFound:
                     template = template_env.get_template('autosummary/base.rst')
 
+            def exclude_member(obj, name):
+                if sys.skip_member(name, obj): 
+                    return True
+                
+                live = getattr(obj, name)
+
+                if inspect.isbuiltin(live): 
+                    return True
+
+                real_module = inspect.getmodule(live)
+                if real_module is not None:
+                    if real_module.__name__ in ["ctypes", 
+                                                "unittest"]: 
+                        return True
+                    
+                c = getattr(obj, name)
+                if inspect.isclass(c) or inspect.isfunction(c):
+                    if (c.__module__!=obj.__name__+".base" and
+                        c.__module__!=obj.__name__):
+                        return True
+                return False
+                
             def get_members(obj, typ, include_public=[]):
                 items = []
                 for name in dir(obj):
+                    # skip_member
+                    if exclude_member(obj, name): 
+                        continue
                     try:
                         documenter = get_documenter(safe_getattr(obj, name),
                                                     obj)
@@ -163,26 +196,119 @@ def generate_autosummary_docs(sources, o
                         continue
                     if documenter.objtype == typ:
                         items.append(name)
+                    elif typ=='function' and documenter.objtype=='boundmethod':
+                        items.append(name)
                 public = [x for x in items
                           if x in include_public or not x.startswith('_')]
                 return public, items
 
+            def def_members(obj, typ, include_public=[]):
+                items = []
+                try:
+                    obj_dict = safe_getattr(obj, '__dict__')
+                except AttributeError:
+                    return []
+                defined = obj_dict.keys()
+                defined.sort()
+                for name in defined:
+                    if exclude_member(obj, name): 
+                        continue
+                    try:
+                        documenter = get_documenter(safe_getattr(obj, name), obj)
+                    except AttributeError:
+                        continue
+                    if documenter.objtype == typ:
+                        items.append(name)
+                public = [x for x in items
+                          if x in include_public or not x.startswith('_')]
+                return public
+
+            def get_iattributes(obj):
+                items = []
+                name = obj.__name__
+                obj_attr = dir(obj)
+                analyzer = ModuleAnalyzer.for_module(obj.__module__)
+                attr_docs = analyzer.find_attr_docs()
+                for pair, doc in attr_docs.iteritems():
+                    if name!=pair[0]:
+                        continue
+                    if not pair[1] in obj_attr:
+                        items.append({"name":pair[1],
+                                      "doc":'\n   '.join(doc)})
+                items.sort(key=lambda d: d["name"]) 
+                return items
+
             ns = {}
 
             if doc.objtype == 'module':
-                ns['members'] = dir(obj)
-                ns['functions'], ns['all_functions'] = \
-                    get_members(obj, 'function')
+                ns['all_members'] = dir(obj)
+
                 ns['classes'], ns['all_classes'] = \
                     get_members(obj, 'class')
+                ns['functions'], ns['all_functions'] = \
+                                   get_members(obj, 'function')
                 ns['exceptions'], ns['all_exceptions'] = \
                     get_members(obj, 'exception')
+                ns['data'], ns['all_data'] = \
+                                   get_members(obj, 'data')
+                documented = ns['classes']+ns['functions'] +ns['exceptions']+ns['data']
+
+                if sys.all_submodules.has_key(obj.__name__):
+                    ns['submodules'] = sys.all_submodules[obj.__name__]
+                    # Hide base submodule
+                    if "base" in ns['submodules']:
+                        ns['submodules'].remove("base")
+                    documented += ns['submodules']
+
+                ns['members'] = ns['all_members']
+                try:
+                    obj_dict = safe_getattr(obj, '__dict__')
+                except AttributeError:
+                    obj_dict = []
+
+                public = [x for x in obj_dict if not x.startswith('_')]
+                for item in documented:
+                    if item in public:
+                        public.remove(item)
+
+                public.sort()
+                ns['members'] = public
+                ns['constants'] = [x for x in public
+                                   #if not sys.skip_member(x, obj)]
+                                   if not exclude_member(obj, x)]
+
             elif doc.objtype == 'class':
                 ns['members'] = dir(obj)
+                ns['events'], ns['all_events'] = \
+                                 get_members(obj, 'event')
                 ns['methods'], ns['all_methods'] = \
                     get_members(obj, 'method', ['__init__'])
                 ns['attributes'], ns['all_attributes'] = \
                     get_members(obj, 'attribute')
+                # Add instance attributes
+                ns['iattributes'] = get_iattributes(obj)
+                ns['def_events'] = def_members(obj, 'event')
+                ns['def_methods'] = def_members(obj, 'method')
+                ns['def_attributes'] = def_members(obj, 'attribute')
+
+                # Constructor method special case
+                if '__init__' in ns['methods']:
+                    ns['methods'].remove('__init__')
+                    if '__init__' in ns['def_methods']:
+                        ns['def_methods'].remove('__init__')
+                    ns['constructor']=['__init__']
+                else:
+                    ns['constructor']=[]
+
+                ns['inherited'] = []
+                for t in ['events', 'methods', 'attributes']:
+                    key = 'inh_' + t
+                    ns[key]=[]
+                    for item in ns[t]:
+                        if not item in ns['def_' + t]:
+                            ns['inherited'].append(item)
+                            ns[key].append(item)
+
 
             parts = name.split('.')
             if doc.objtype in ('method', 'attribute'):
diff -upN /home/rob/python/pyglet/sphinx_1.3.1/__init__.py ./__init__.py
--- /home/rob/python/pyglet/sphinx_1.3.1/__init__.py	2015-05-09 12:54:51.119462508 +0200
+++ ./__init__.py	2015-05-09 12:40:50.532727535 +0200
@@ -193,6 +193,7 @@ class Autosummary(Directive):
         'toctree': directives.unchanged,
         'nosignatures': directives.flag,
         'template': directives.unchanged,
+        'hidden': directives.flag,
     }
 
     def warn(self, msg):
@@ -208,7 +209,10 @@ class Autosummary(Directive):
         names = [x.strip().split()[0] for x in self.content
                  if x.strip() and re.search(r'^[~a-zA-Z_]', x.strip()[0])]
         items = self.get_items(names)
-        nodes = self.get_table(items)
+        if 'hidden' in self.options:
+            nodes = []
+        else:
+            nodes = self.get_table(items)
 
         if 'toctree' in self.options:
             dirname = posixpath.dirname(env.docname)
@@ -230,7 +234,8 @@ class Autosummary(Directive):
             tocnode['glob'] = None
 
             tocnode = autosummary_toc('', '', tocnode)
-            nodes.append(tocnode)
+            if not 'hidden' in self.options:
+                nodes.append(tocnode)
 
         return self.warnings + nodes
 
@@ -324,6 +329,12 @@ class Autosummary(Directive):
                 summary = m.group(1).strip()
             elif doc:
                 summary = doc[0].strip()
+
+                # Clean attribute fake doc
+                __doc = type(obj).__doc__
+                if isinstance(__doc, str):
+                    if __doc.startswith(summary):
+                        summary = "Type: "+type(obj).__name__                    
             else:
                 summary = ''
 
@@ -500,7 +511,7 @@ def _import_by_name(name):
             modname = '.'.join(name_parts[:j])
             try:
                 __import__(modname)
-            except ImportError:
+            except:# ImportError:
                 continue
             if modname in sys.modules:
                 break
@@ -553,7 +564,7 @@ def process_generate_options(app):
     if not genfiles:
         return
 
-    from sphinx.ext.autosummary.generate import generate_autosummary_docs
+    from generate import generate_autosummary_docs
 
     ext = app.config.source_suffix[0]
     genfiles = [genfile + (not genfile.endswith(ext) and ext or '')
